name: Python package

on: [ push ]

jobs:
  test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test_requirements.txt
      - name: Test with pytest
        run: |
          pytest --cov=./ --cov-report=xml

  notify:
    needs: test
    runs-on: ubuntu-20.04

    if: contains(fromJson('["refs/heads/main", "refs/heads/binaries-fixes"]'), github.ref) || startsWith(github.ref, 'refs/tags')

    steps:
      - name: Slack trigger
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-binaries:
    needs: test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ 'windows-latest', 'ubuntu-20.04', 'macos-latest' ]
    env:
      BINARY_OS: '${{ matrix.os }}'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Dependencies
        run: python binaries.py install
      - name: Test Safety
        run: python binaries.py test
      - name: Producing Binaries
        run: python binaries.py dist
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          name: safety-win-i686.exe
          path: dist/safety-win-i686.exe
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          name: safety-win-x86_64.exe
          path: dist/safety-win-x86_64.exe
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        with:
          name: safety-linux-x86_64
          path: dist/safety-linux-x86_64
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          name: safety-macos-x86_64
          path: dist/safety-macos-x86_64
          if-no-files-found: error


  deploy-pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: build-binaries
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/safety
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  create-gh-release:
    needs: deploy-pypi
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          draft: True
