name: Python Package - Contributor

on:
  pull_request:
    branches:
      - main

jobs:
  check-pr-source:
    runs-on: ubuntu-20.04
    outputs:
      is_fork: ${{ steps.check_fork.outputs.is_fork }}
      author_association: ${{ steps.check_fork.outputs.author_association }}
    steps:
      - name: Check if PR is from a fork and author association
        id: check_fork
        run: |
          echo "IS_FORK=${{ github.event.pull_request.head.repo.fork }}" >> $GITHUB_OUTPUT
          echo "AUTHOR_ASSOCIATION=${{ github.event.pull_request.author_association }}" >> $GITHUB_OUTPUT
      - name: Debug outputs
        run: |
          echo "Is Fork: ${{ steps.check_fork.outputs.is_fork }}"
          echo "Author Association: ${{ steps.check_fork.outputs.author_association }}"

  downstream-job:
    needs: check-pr-source
    runs-on: ubuntu-20.04
    steps:
      - name: Use job outputs
        run: |
          echo "Is Fork: ${{ needs.check-pr-source.outputs.is_fork }}"
          echo "Author Association: ${{ needs.check-pr-source.outputs.author_association }}"

  test:
    needs: check-pr-source
    if: >
      ${{ needs.check-pr-source.outputs.is_fork == 'true' ||
           needs.check-pr-source.outputs.author_association != 'COLLABORATOR' &&
           needs.check-pr-source.outputs.author_association != 'MEMBER' &&
           needs.check-pr-source.outputs.author_association != 'OWNER' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - name: Debug Author Association and Fork Status
        run: |
          echo "Author association: ${{ needs.check-pr-source.outputs.author_association }}"
          echo "Is PR from fork: ${{ needs.check-pr-source.outputs.is_fork }}"
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test_requirements.txt
      - name: Test with pytest
        run: |
          pytest --cov=./ --cov-report=xml

  build-binaries:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['windows-latest', 'ubuntu-20.04', 'macos-latest']
    env:
      BINARY_OS: '${{ matrix.os }}'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Dependencies
        run: python binaries.py install
      - name: Test Safety
        run: python binaries.py test
      - name: Producing Binaries
        run: python binaries.py dist
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          name: safety-win-i686.exe
          path: dist/safety-win-i686.exe
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          name: safety-win-x86_64.exe
          path: dist/safety-win-x86_64.exe
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        with:
          name: safety-linux-x86_64
          path: dist/safety-linux-x86_64
          if-no-files-found: error
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.os == 'macos-latest' }}
        with:
          name: safety-macos-x86_64
          path: dist/safety-macos-x86_64
          if-no-files-found: error
